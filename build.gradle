buildscript {
    ext {
        springBootVersion = '1.4.3.RELEASE'
        springDataVersion = '1.12.6.RELEASE'
        springSecurityVersion = '2.0.12.RELEASE'
        mysqlConnectorVersion = '6.0.5'
        lombokVersion = '1.16.12'
        queryDslVersion = '4.1.4'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'me.academeg'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }

    configurations {
        oneJar
    }
}

project(':blog-api') {
    apply plugin: 'spring-boot'

    def generatedSourcePath = 'src/main/generated-src'

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir generatedSourcePath
            }
        }
    }

    configurations {
        querydslapt
        oneJar
    }

    dependencies {
        // Spring
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
        compile "org.springframework.data:spring-data-commons:${springDataVersion}"

        // Spring Security
        compile "org.springframework.security.oauth:spring-security-oauth2:${springSecurityVersion}"

        // MySql connector
        compile "mysql:mysql-connector-java:${mysqlConnectorVersion}"

        // Lombok for create getter/setter and other cool features
        compile "org.projectlombok:lombok:${lombokVersion}"

        // QueryDSL
        compile "com.querydsl:querydsl-jpa:${queryDslVersion}"
        querydslapt "com.querydsl:querydsl-apt:${queryDslVersion}"

//        compile project(':blog-frontend')

        testCompile "junit:junit:4.12"
    }

    task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
        source = sourceSets.main.java
        classpath = configurations.compile + configurations.querydslapt
        options.compilerArgs = [
                "-proc:only",
                "-processor",
                "com.querydsl.apt.jpa.JPAAnnotationProcessor",
                "-Aquerydsl.entityAccessors=true"
        ]
        destinationDir = file(generatedSourcePath)
    }

    compileJava.dependsOn generateQueryDSL

    clean {
        delete generatedSourcePath
    }
}

project(':blog-frontend') {
    dependencies {
        // Spring
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    }
}
